The initial program was built adhoc, on a need by need basis. As a result, there was little to no modularisation,
very little reusable code, and extremely convoluted product databases.

This new program serves as a duel purpose, as the new stock control system (Modeling purposes only) and as a set of
utilities to detangle and remove clutter from the previous data structure. The overall goal is to have a fully normalised
set of data before implementing the models and the mappers to prevent coding inefficiencies.

PRE MODELS AND MAPPERS:

13.11.2018 - Product table for memory complete:
    Data has been detangled. A series of functions have been created to deal with the standardisation of
    product category and manufacturer throughout the detangling process.

    - PROTOTYPE MODELLING:
    - Data structure for product->memory provisionally completed.
    - Parent tables category and company complete, foreign keys assigned.

14.11.2018 - Image folder automation and copying complete
    As each product is detangled, there was the ever growing problem of the stock images not marrying up. They were
    clumped together in the initial instance by manufacturer. As this is not conducive with going forward, a class
    has been created called "ImageReassigner". This in essence builds a new directory structure and renames the image
    as appropriate

    OLD: stockImages/manufacturer/PREFIX-FILENAME.xxx

    NEW: images/stock/manufcaturer/category/modelNumber/FILENAME

    In addition to the above, the function "memoryDetangler" has been separated off into a generic Dentangler Class,
    where common detangle functions are managed. The product specific detangling is then handed off to specific classes.

    Though it took the morning, the detangling process has been simplified and the ability to detangle products has been
    exponentially increased. All common detangle methods are handled by the class "Detangler", the specific product
    detangling is then dealt with by a series of specific classes. The imageReassigner is called in the detangler to
    handle the complete detangling with one call to the class Detangler and the product passed in.

15.11.2018
    Rebuild of the primary stocked_skus table. As the system will be cross compatible with several supplier systems,
    the idea is to minimise any updating/process time during the daily stock reconciliation. Where as before, the
    stocked_skus table was exactly that, no it contains fields referencing "for_sale" and "in_stock". What is the point
    in working out the margins if it is not in stock? What is the point in updating the product if it's not for sale?
    The latter also allows a quick reference for removal of OLD stock from the DB should it be required.
    - Detangling of Graphics card:
        Major rebuild of the graphics card table. Now includes all the aspects that were not available in 2015 due to
        lack of time and compatibility. When modeling is implemented, the missing specifications will be able to be
        added with relative ease. At present, RAW (outdated and incomplete) data is only available.

16.11.2018
    Though the detanglers work, now that 4 products have been implemented, there are concerns over the tidiness of the
    classes, and their consistency. For this reason, I have introduced the "DentanglerProductAbstract", which has
    allowed for forced uniformity during the detangling process, as well as duplicated variable declaration.
        - CaseFanDetangler, MemoryDetangler, GraphicsCardDetangler have all been standardised
        and are templated from the abstract DetanglerProductAbstract.

    Three products completed and detangled. Further refinements to the detangler classes made, repetive code has now
    been abolished.

    In preparation for modelling, mapping, and repository interaction, the third and final stock table has been built
    Legacy file (public->sql->legacy->stock _control) has been upated to: (public->sql->search->stock_control).

    To reduce unnecessary and one time use coding, the SQL changes to the latter file allow for quick reconciliation
    and reindexing of the stock, specifically the relationship between stocked_skus and stocked_products, which is a
    1-2-1 relationship.

    Template built for proposed system.
    HOME - SUPPLIERS - STOCK - UTILITIES
    - HOME is unknown
    - SUPPLIERS will download the stock records for all suppliers via FTP and update the stock database accordingly.
        - Verification, Security,  Pricing, Quantity, Stock levels.
    - STOCK - CRUD interface...
    - UTILITIES - Detanglers & Other tools as required. Will not be needed by "final" build.

17.11.2018
    A Slight change to the product data structure... EAN (barcodes) have been reassigned to the stock control table.
    It makes more sense as this will NEVER change and is more informational (packaging) than the objective (physical)

19.11.2018
    MODELLING:
    Rather than completing the detanglers for 30+ products, I have started creation on the engine that will run both
    the stock control (admin) and link with the "shop". I have decided on the name THORN...
    The model setup can be found in (private->THORN), which is currently in prototyping.
    Products will be returned by one of three ways...
        - 1: INDIVIDUALLY - I.e. by Model Number
        - 2: GROUP - I.e. by manufacturer
        - 3: SELECTION - I.e. Type & Manufacturer.
    I have found previously that the best way to tackle isues like this is to actually call the model, populate the
    model, then work out the best way to refine for removal of redundancy.
    Get it working -> Get it working better...

20.11.2018
    Unlike similar systems I have worked on in the past, I am not going to be using the SELECT * when performing queries.
    I am going to be using INFORMATION SCHEMA to get the names of the columns and SELECT as appropriate.

    Prototyping has been a success. As previously mentioned, unlike other systems I have used which have implemented
    SELECT * (due to poor planning) and have relied on hard coded table names (usually in arrays), THORN is dynamic
    in gathering the table names required for stock_control and product.
    The caveat in prototyping is that CURRENTLY, the client will only return the equivalent of a SELECT *, but as far
    as planning goes, I cannot envisage an occasion where only a PART model would need to be returned.
    The prototyping development can be seen in (private->THORN->ParentClasses->Repository->Repository.php).
    When the prototyping for UPDATE is being implemented, it may be necessary for a slight restructuring or creation of
    new methods to access the entity.

    Merging of the tables stock_control and (prototyping) memory (and therefore ALL products) is a success. The next
    step of development is to populate a model/object so manipulation can occur in memory.

21.11.2018
    The relationship (prototyping) between Model and Repository appears to have been solved, for PRODUCTS, that where
    we are READING the data. Populting remains an ugly mess however.
    Static method has been added to the product object which verifies the exiestence of the child class before
    initialisation. Of the 3 main Object types (Customer, Order, Product) Product is never initialised directly.
    The next step is to create the datamapper and seperate that layer from the repository itself.

26.11.2018
    The relationship between Repository, Model, and Mapper have been prototyped and designed thus:
    (private/THORN/ParentClasses/Factory/RepositoryFactory)
    Calls new
    (private/THORN/ParentClasses/Repository/Repository)
    which gets the appropriate statement from
    (private/THORN/SqlStatements/xxxxx)
    which then passes the statement to the mapper
    (private/THORN/ParentClasses/Mapper/MapperObjectXXXXX)
    which then returns a model
    (private/THORN/ParentClasses/Model/)

28.11.2018
    The relationship for reading a single/a collection of entities has been established. Model population has not yet
    been completed, however, the ability to retrieve a product (and theoretically an order and/or a customer) and linking
    two tables WITHOUT the need for a SELECT * has been achieved. As the table names are read from the DB and the query
    formulated based on that, it would be VERY simple to remove (via string/array manipulation) to remove fields that
    are unwanted.

    It has become apparent that when we are Reading/Updating, the order goes
    -> Statement->Mappper->Model,

    When Creating
    -> Model -> Statement -> Mapper

    When deleting? un-certain.

    - While preparing the model collection, a inconsitency has arisen... Despite 25 records being displayed in the DB
    and the manual query in the DB returing 25 results, only 24 are being retunred populated and one displayed blank.
    If I LIMIT 1, I get 0, if I LIMIT 2, I get one etc... This will require further investigation.

29.11.2018
    A quick google showed that I was using PDO::FETCH as opposed to PDO::FETCH ALL. - All result sets have now been
    returned correctly.

    FAST building has taken place since the fetch error was corrected. The mapper for the product READ model is almost
    complete. There are six methods used to identify a GENERIC product:
    abstract function findByAllProductType();

        abstract function findByProductModelNumber($modelNumber);

        abstract function findByProductName($productName);

        abstract function findByProductCompany($companyName);

        abstract function findBySupplierName($supplierName);

        abstract function findBySupplierNumber($supplierNumber);

    Once mapping to the model is complete, I will be investigating ways to identify if a product can be identifed by
    properties unique to the product, I.e. memory size, DPI, etc..





